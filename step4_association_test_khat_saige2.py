__author__ = 'Mary T. Yohannes'

# This script performs single-variant association tests per chromosome using SAIGE
## https://saigegit.github.io/SAIGE-doc/docs/single_step2.html

import hail as hl
import hailtop.batch as hb

# get file size to allocate resources for batch jobs accordingly
def get_file_size(file):
    file_info = hl.utils.hadoop_stat(file)
    size_bytes = file_info['size_bytes']
    size_gigs = size_bytes / (1024 * 1024 * 1024)
    return size_gigs

# perform single-variant association tests per chromosome
## LOCO=True means leave one chromosome out - it's highly recommended to avoid proximal contamination

# Binary trait
def association_test_binary(b, phenotype, site, plink_files, rda_file, variance_ratio, chr, storage_size):
    j = b.new_job(name=f'chr{chr} - {phenotype} - {site}')
    j.image('wzhou88/saige:1.3.0') # SAIGE docker image
    j.cpu(16)
    j.storage(f'{storage_size}Gi')  # increase storage according to file size

    j.command(f'''
    step2_SPAtests.R \
        --bedFile={plink_files.bed} \
        --bimFile={plink_files.bim}  \
        --famFile={plink_files.fam}   \
        --AlleleOrder=alt-first \
        --GMMATmodelFile={rda_file} \
        --varianceRatioFile={variance_ratio} \
        --SAIGEOutputFile={j.ofile} \
        --LOCO=True \
        --chrom {chr} \
        --is_output_moreDetails=TRUE \
        --is_Firth_beta=TRUE \
        --pCutoffforFirth=0.05 ''')

    return j

# Quantitative trait
def association_test_quantitative(b, phenotype, site, plink_files, rda_file, variance_ratio, chr, storage_size):
    j = b.new_job(name=f'{chr} - {phenotype} - {site}')
    j.image('wzhou88/saige:1.3.0') # SAIGE docker image
    j.cpu(16)
    j.storage(f'{storage_size}Gi')  # increase storage according to file size

    j.command(f'''
    step2_SPAtests.R \
        --bedFile={plink_files.bed} \
        --bimFile={plink_files.bim}  \
        --famFile={plink_files.fam}   \
        --AlleleOrder=alt-first \
        --GMMATmodelFile={rda_file} \
        --varianceRatioFile={variance_ratio} \
        --SAIGEOutputFile={j.ofile} \
        --LOCO=True \
        --chrom {chr} \
        --is_output_moreDetails=TRUE ''')

    return j


if __name__ == '__main__':

    backend = hb.ServiceBackend(billing_project='neale-pumas-bge', remote_tmpdir='gs://neurogap-bge-imputed-regional/mary/khat_gwas/tmp')  # set up backend

    # phenotypes we are interested in
    phenotype_cols = ["assist_khat", "assist_khat_amt"]

    for phenotype in phenotype_cols:

        # study sites
        sites = ["AAU", "KEMRI", "Moi", "UCT", "Uganda"]

        for site in sites:

            b = hb.Batch(backend=backend, name=f'step4: SAIGE GWAS step2 - {phenotype} - {site}')  # define batch

            # QC'ed NeuroGAP dataset (all sites and all phenotypes) - generated by Lerato
            plink_files = b.read_input_group(**{
                'bed': 'gs://neurogap-bge-imputed-regional/lerato/wave2/plink_files/all_sites_all_phenos.bed',
                'bim': 'gs://neurogap-bge-imputed-regional/lerato/wave2/plink_files/all_sites_all_phenos.bim',
                'fam': 'gs://neurogap-bge-imputed-regional/lerato/wave2/plink_files/all_sites_all_phenos.fam'})

            # read in the model file generated using this script step3_fit_null_khat_saige1.py (SAIGE step 1)
            rda_file = b.read_input(f'gs://neurogap-bge-imputed-regional/mary/khat_gwas/saige_step1_outputs/{phenotype}/{site}_{phenotype}_saige_step1.rda')

            # read in the variance ratio file generated using this script step3_fit_null_khat_saige1.py (SAIGE step 1)
            variance_ratio = b.read_input(f'gs://neurogap-bge-imputed-regional/mary/khat_gwas/saige_step1_outputs/{phenotype}/{site}_{phenotype}_saige_step1.varianceRatio.txt')

            # get file size
            plink_size = get_file_size('gs://neurogap-bge-imputed-regional/lerato/wave2/plink_files/all_sites_all_phenos.bed')
            storage_size = round(plink_size + 30)

            # run function per chromosome - one job per chr
            for chr in range(1, 23):

                # pick which function to run based on what type of trait the phenotype is
                if phenotype == "assist_khat":

                    # assist_khat = binary
                    run_binary = association_test_binary(b, phenotype, site, plink_files, rda_file, variance_ratio, chr, storage_size)

                    # write out output
                    b.write_output(run_binary.ofile, f'gs://neurogap-bge-imputed-regional/mary/khat_gwas/saige_step2_outputs/{phenotype}/{site}_chr{chr}_{phenotype}_saige_step2.txt')


                else:
                    # assist_khat_amt = quantitative
                    run_quantitative = association_test_quantitative(b, phenotype, site, plink_files, rda_file, variance_ratio, chr, storage_size)

                    # write out output
                    b.write_output(run_quantitative.ofile, f'gs://neurogap-bge-imputed-regional/mary/khat_gwas/saige_step2_outputs/{phenotype}/{site}_chr{chr}_{phenotype}_saige_step2.txt')

            b.run(wait=False)  # run batch

    backend.close()  # close a batch backend




